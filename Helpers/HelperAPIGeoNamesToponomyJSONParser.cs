// <auto-generated />
// via https://app.quicktype.io/
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using GeoTagNinja;
//
//    var geoResponse = GeoResponse.FromJson(JsonString);

namespace geoTagNinja
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    public partial class GeoResponseToponomy
    {
        [JsonProperty("geonames", NullValueHandling = NullValueHandling.Ignore)]
        public Geoname[] Geonames { get; set; }
    }
    public partial class GeoResponseToponomy
    {
        public static GeoResponseToponomy FromJson(string Json) => JsonConvert.DeserializeObject<GeoResponseToponomy>(Json, geoTagNinja.Converter.Settings);
    }
    public partial class Geoname
    {
        [JsonProperty("distance", NullValueHandling = NullValueHandling.Ignore)]
        public string Distance { get; set; }

        [JsonProperty("timezone", NullValueHandling = NullValueHandling.Ignore)]
        public Timezone Timezone { get; set; }


        [JsonProperty("adminCode1", NullValueHandling = NullValueHandling.Ignore)]
        public string AdminCode1 { get; set; }

        [JsonProperty("lng", NullValueHandling = NullValueHandling.Ignore)]
        public string Lng { get; set; }
        
        [JsonProperty("geonameId", NullValueHandling = NullValueHandling.Ignore)]
        public long? GeonameId { get; set; }

        [JsonProperty("toponymName", NullValueHandling = NullValueHandling.Ignore)]
        public string ToponymName { get; set; }

        [JsonProperty("countryId", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? CountryId { get; set; }

        [JsonProperty("fcl", NullValueHandling = NullValueHandling.Ignore)]
        public string Fcl { get; set; }

        [JsonProperty("srtm3", NullValueHandling = NullValueHandling.Ignore)]
        public long Srtm3 { get; set; }

        [JsonProperty("population", NullValueHandling = NullValueHandling.Ignore)]
        public long? Population { get; set; }

        [JsonProperty("countryCode", NullValueHandling = NullValueHandling.Ignore)]
        public string CountryCode { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("fclName", NullValueHandling = NullValueHandling.Ignore)]
        public string FclName { get; set; }

        [JsonProperty("adminCodes1", NullValueHandling = NullValueHandling.Ignore)]
        public AdminCodes1 AdminCodes1 { get; set; }

        [JsonProperty("countryName", NullValueHandling = NullValueHandling.Ignore)]
        public string CountryName { get; set; }

        [JsonProperty("fcodeName", NullValueHandling = NullValueHandling.Ignore)]
        public string FcodeName { get; set; }

        [JsonProperty("adminName1", NullValueHandling = NullValueHandling.Ignore)]
        public string AdminName1 { get; set; }
        [JsonProperty("adminName2", NullValueHandling = NullValueHandling.Ignore)]
        public string AdminName2 { get; set; }
        [JsonProperty("adminName3", NullValueHandling = NullValueHandling.Ignore)]
        public string AdminName3 { get; set; }

        [JsonProperty("adminName4", NullValueHandling = NullValueHandling.Ignore)]
        public string AdminName4 { get; set; }
        [JsonProperty("lat", NullValueHandling = NullValueHandling.Ignore)]
        public string Lat { get; set; }

        [JsonProperty("fcode", NullValueHandling = NullValueHandling.Ignore)]
        public string Fcode { get; set; }
    }
    public partial class AdminCodes1
    {
        [JsonProperty("ISO3166_2", NullValueHandling = NullValueHandling.Ignore)]
        public string Iso31662 { get; set; }
    }
    public partial class Timezone
    {
        [JsonProperty("gmtOffset")]
        public long GmtOffset { get; set; }

        [JsonProperty("timeZoneId")]
        public string TimeZoneId { get; set; }

        [JsonProperty("dstOffset")]
        public long DstOffset { get; set; }
    }
    public partial class GeoResponseTimeZone
    {
        [JsonProperty("sunrise", NullValueHandling = NullValueHandling.Ignore)]
        public string Sunrise { get; set; }

        [JsonProperty("lng", NullValueHandling = NullValueHandling.Ignore)]
        public double? Lng { get; set; }

        [JsonProperty("countryCode", NullValueHandling = NullValueHandling.Ignore)]
        public string CountryCode { get; set; }

        [JsonProperty("gmtOffset", NullValueHandling = NullValueHandling.Ignore)]
        public long? GmtOffset { get; set; }

        [JsonProperty("rawOffset", NullValueHandling = NullValueHandling.Ignore)]
        public long? RawOffset { get; set; }

        [JsonProperty("sunset", NullValueHandling = NullValueHandling.Ignore)]
        public string Sunset { get; set; }

        [JsonProperty("timezoneId", NullValueHandling = NullValueHandling.Ignore)]
        public string TimezoneId { get; set; }

        [JsonProperty("dstOffset", NullValueHandling = NullValueHandling.Ignore)]
        public long? DstOffset { get; set; }

        [JsonProperty("countryName", NullValueHandling = NullValueHandling.Ignore)]
        public string CountryName { get; set; }

        [JsonProperty("time", NullValueHandling = NullValueHandling.Ignore)]
        public string Time { get; set; }

        [JsonProperty("lat", NullValueHandling = NullValueHandling.Ignore)]
        public double? Lat { get; set; }
    }
    public partial class GeoResponseTimeZone
    {
        public static GeoResponseTimeZone FromJson(string Json) => JsonConvert.DeserializeObject<GeoResponseTimeZone>(Json, geoTagNinja.Converter.Settings);
    }
    public static class Serialize
    {
        public static string ToJson(this GeoResponseToponomy self) => JsonConvert.SerializeObject(self, geoTagNinja.Converter.Settings);
    }
    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
